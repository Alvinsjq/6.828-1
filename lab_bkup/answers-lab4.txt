Sean Liu
6.828
10.19.2009

Lab 4: Questions

1. In your implementation of env_run() you should have called lcr3(). Before and after the call to lcr3(), your code makes references (at least it should) to the variable e, the argument to env_run. Upon loading the %cr3 register, the addressing context used by the MMU is instantly changed. But a virtual address (namely e) has meaning relative to a given address context--the address context specifies the physical address to which the virtual address maps. Why can the pointer e be dereferenced both before and after the addressing switch?

This is because in every environment we map all the virtual addresses above UTOP (the kernel addresses) to be the same.  Hence, we can continue to dereference the pointer before and after the context switch.

===

Challenge:
Challenge! Add a less trivial scheduling policy to the kernel, such as a fixed-priority scheduler that allows each environment to be assigned a priority and ensures that higher-priority environments are always chosen in preference to lower-priority environments. If you're feeling really adventurous, try implementing a Unix-style adjustable-priority scheduler or even a lottery or stride scheduler. (Look up "lottery scheduling" and "stride scheduling" in Google.)

Write a test program or two that verifies that your scheduling algorithm is working correctly (i.e., the right environments get run in the right order). It may be easier to write these test programs once you have implemented fork() and IPC in parts B and C of this lab.

ANSWER:
We define new priorities:
-2 (lowest) to 2 (highest), where 0 (default initialized) is the normal priority level.  This allows us to avoid having to change the default code for creating environments.

We change sched_yield() to loop through all the processes and select the highest priority.  Note that in the checks, we still begin the search with the current env idx + 1, and only select processes if their priority is strictly greater than the current max priority.

We then expose a method called sys_env_set_priority to user programs.

Lastly we create a user program called prfork (priority fork), which sets the parent's priority level to high, and successfully demonstrates that priorities are taken into account during the scheduler.  Below is the print out (note that we have one call to the child when the initial fork occurs):

0: I am the parent!
1: I am the parent!
2: I am the parent!
3: I am the parent!
4: I am the parent!
5: I am the parent!
6: I am the parent!
7: I am the parent!
8: I am the parent!
9: I am the parent!
[00001001] exiting gracefully
[00001001] free env 00001001
0: I am the child!
1: I am the child!
2: I am the child!
3: I am the child!
4: I am the child!
5: I am the child!
6: I am the child!
7: I am the child!
8: I am the child!
9: I am the child!
10: I am the child!
11: I am the child!
12: I am the child!
13: I am the child!
14: I am the child!
15: I am the child!
16: I am the child!
17: I am the child!
18: I am the child!
19: I am the child!


